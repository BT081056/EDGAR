# -*- coding: utf-8 -*-
"""
Created on Tue Aug 18 15:59:10 2020

@author: 2007020
"""
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *

import cv2
import matplotlib.pyplot as plt
import sys
import pandas as pd
from ui_MainWindow import Ui_MainWindow
import threading
import time
# 影片檔案
videoFile = 0
# 開啟影片檔

n = 0

class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MainWindow,self).__init__()
        Ui_MainWindow.__init__(self)
        self.setupUi(self)
        self.n = 1
        # 執行緒自定義訊號連線的槽函式
        self.work = WorkThread()
        self.work.start()
        self.work.changePixmap.connect(self.img_output.setPixmap)
        self.work2 = Check()
        self.work2.start()
        
        
        self.start_btn.clicked.connect(self.execute)
        
        self.close_btn.clicked.connect(QCoreApplication.instance().quit)

    def execute(self):
        # 啟動執行緒
        
        self.thread = Check()
        self.thread.file_changed_signal.connect(self.update_file_list)
        self.start_btn.setEnabled(False)
        self.thread.start()

        
        
    def update_file_list(self, file_inf):
        self.VALUE.setText(file_inf)



class Check(QThread):
    file_changed_signal = pyqtSignal(str) # 信号类型：str
    
    def __init__(self, sec=0, parent=None):
        super().__init__(parent)
        self.working = True
        self.sec = sec
        
    def __del__(self):
        self.working = False
        self.wait()
        
    def run(self):
        while self.working == True:
            self.file_changed_signal.emit('当前秒数：{}'.format(self.sec))
            self.sleep(1)
            self.sec += 1


        
class WorkThread(QThread):
    # 自定義訊號物件。引數str就代表這個訊號可以傳一個字串
    changePixmap = pyqtSignal(QPixmap)
    
    def __int__(self):
        # 初始化函式
        super(WorkThread, self).__init__()

    def run(self):
        #重寫執行緒執行的run函式
        #觸發自定義訊號
        cap = cv2.VideoCapture(videoFile)
        
        while True:
            ret, frame = cap.read()
            rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            convertToQtFormat = QImage(rgbImage.data, rgbImage.shape[1], rgbImage.shape[0], QImage.Format_RGB888)
            convertToQtFormat = QPixmap.fromImage(convertToQtFormat)
            p = convertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
            self.changePixmap.emit(p)
            
            
#    def showCamer(self):
#        if self.device.isOpened():
#            ret, frame = self.device.read()
#        else:
#            ret = False
#            height, width, bytesPerComponent = frame.shape
#            bytesPerLine = bytesPerComponent * width
#            # 變換彩色空間順序
#            cv2.cvtColor(frame, cv2.COLOR_BGR2RGB,frame)
#            # 轉為QImage物件
#            self.image = QImage(frame.data, width, height, bytesPerLine, QImage.Format_RGB888)
#            self.img_output.setPixmap(QPixmap.fromImage(self.image))


#
#class Timer(QThread):
#    IMG = pyqtSignal(QImage)
#    
#    def __int__(self):
#        # 初始化函式
#        super(Timer, self).__init__()
#
#    def run(self):
#        #重寫執行緒執行的run函式
#        #觸發自定義訊號
#        
#        for i in range(20):
#            ret, frame = cv2.VideoCapture(videoFile).read()
#            time.sleep(1)
#            height, width, bytesPerComponent = frame.shape
#            bytesPerLine = bytesPerComponent * width
#            # 變換彩色空間順序
#            cv2.cvtColor(frame, cv2.COLOR_BGR2RGB,frame)
#            # 轉為QImage物件
#
#            self.IMG.emit(frame)

        
    
if __name__=='__main__':
    app=QApplication(sys.argv)
    window=MainWindow()
    window.show()
    sys.exit(app.exec())
